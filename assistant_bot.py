import logging
import os
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from database import TaskDB
from logic import parse_task_message, task_summary
from prompts import chat_with_gpt

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

REMINDER_CHAT_ID = os.getenv("REMINDER_CHAT_ID") or ""

if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN is not set")
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY is not set")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
db = TaskDB("tasks.db")
scheduler = AsyncIOScheduler()
logging.basicConfig(level=logging.INFO)

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ò–ò-–∫–æ–º–ø–∞–Ω—å–æ–Ω. –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –∑–∞–¥–∞—á–∏, —Å–ø—Ä–∞—à–∏–≤–∞–π, —Å–ø–æ—Ä—å ‚Äî —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å.")

async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tasks = db.get_all_tasks()
    summary = task_summary(tasks)
    await update.message.reply_text(summary or "–ó–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç üöÄ")

async def clear_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db.clear_tasks()
    await update.message.reply_text("üßπ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.")

# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
async def monday_reminder():
    tasks = db.get_all_tasks()
    summary = task_summary(tasks, monday_mode=True)
    if summary and REMINDER_CHAT_ID:
        await app.bot.send_message(chat_id=REMINDER_CHAT_ID, text=summary)

# --- –°–æ–æ–±—â–µ–Ω–∏—è ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    chat_id = update.effective_chat.id

    try:
        # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–∞–∫ –∑–∞–¥–∞—á—É
        task = parse_task_message(user_text)
        if task:
            db.add_task(**task)
            await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task['text']} (–¥–æ {task['due_date']})")
        else:
            # GPT-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            reply = chat_with_gpt(user_text, OPENAI_API_KEY, db)
            await update.message.reply_text(reply)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –∏–Ω–∞—á–µ.")

# --- –ó–∞–ø—É—Å–∫ ---
app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("tasks", list_tasks))
app.add_handler(CommandHandler("clear", clear_tasks))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

scheduler.add_job(monday_reminder, 'cron', day_of_week='mon', hour=9)
scheduler.start()

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
app.run_polling()
