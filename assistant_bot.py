import logging
import os
import openai
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

logging.basicConfig(level=logging.INFO)
tasks = []  # –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ –ø–∞–º—è—Ç–∏

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ò–ò-–∫–æ–º–ø–∞–Ω—å–æ–Ω. –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –∏ —è –ø–æ–º–æ–≥—É.")

async def svodka(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if tasks:
        message = "\n".join([f"üîπ {t['text']} (–¥–æ {t['due']})" for t in tasks])
    else:
        message = "–ü–æ–∫–∞ —á—Ç–æ –∑–∞–¥–∞—á –Ω–µ—Ç."
    await update.message.reply_text("üìÖ –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏:\n" + message)

# --- –û—Ç–≤–µ—Ç –Ω–∞ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–æ–≤–æ "–¥–æ" ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –∑–∞–¥–∞—á—É
    if "–¥–æ" in user_text:
        parts = user_text.split("–¥–æ")
        task_text = parts[0].strip()
        try:
            due_date = parts[1].strip()
            tasks.append({"text": task_text, "due": due_date})
            await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task_text} (–¥–æ {due_date})")
            return
        except:
            pass

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ GPT-4
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "–¢—ã —É–º–Ω—ã–π, –≤–µ–∂–ª–∏–≤—ã–π, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º—ã—Å–ª—è—â–∏–π –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –ø–æ–º–æ–≥–∞–µ—à—å —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞–º–∏, –Ω–µ –∑–∞–±—ã–≤–∞–µ—à—å –∑–∞–¥–∞—á–∏, –æ–±—â–∞–µ—à—å—Å—è —Ç–µ–ø–ª–æ –∏ –ø–æ –¥–µ–ª—É."},
            {"role": "user", "content": user_text}
        ]
    )
    reply = response.choices[0].message.content
    await update.message.reply_text(reply)

# --- –ó–∞–ø—É—Å–∫ ---
app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("svodka", svodka))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
app.run_polling()
